{"version":3,"sources":["gear-symbol.svg","fast.svg","fonts/Ubuntu-Regular.ttf","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","src","gearSymbol","alt","fastSymbol","href","target","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,yC,kBCA3CD,EAAOC,QAAU,IAA0B,kC,2GCA3CD,EAAOC,QAAU,IAA0B,4C,4HCoF5BC,MA3Ef,WACE,OACE,yBAAKC,UAAU,OAyBb,4BAAQA,UAAU,cAClB,yBAAKA,UAAU,gBACb,yBAAKC,IAAKC,IAAYF,UAAU,gBAAgBG,IAAI,SACpD,yBAAKF,IAAKC,IAAYF,UAAU,gBAAgBG,IAAI,SACpD,yBAAKH,UAAU,gBACb,yBAAKA,UAAU,mBACb,kCACA,kCACA,iCACA,iCACA,kCAEF,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,cACb,yBAAKC,IAAKG,IAAYD,IAAI,gBAC1B,mDAMR,yBAAKH,UAAU,iBACb,yBAAKA,UAAU,SACb,2CAIJ,yBAAKA,UAAU,UACb,2BACE,uBACEK,KAAK,mCACLC,OAAO,UAFT,wBAQF,6DACA,6CAAkB,uBAAGD,KAAK,2CAA2CE,MAAM,WAAzD,WAAlB,SAAsG,uBAAGF,KAAK,4BAA4BE,MAAM,YAA1C,sBACtG,2BAAG,0CAAe,uBAAGF,KAAK,4GAAR,8CAAf,OAAmK,uBAAGA,KAAK,4GAAR,iBC/D1JG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5231e766.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gear-symbol.38edbb50.svg\";","module.exports = __webpack_public_path__ + \"static/media/fast.572d3931.svg\";","module.exports = __webpack_public_path__ + \"static/media/Ubuntu-Regular.2505bfbd.ttf\";","import React from 'react';\r\n//import logo from './logo.svg';\r\nimport fastSymbol from './fast.svg';\r\nimport gearSymbol from './gear-symbol.svg';\r\n//import eaglePic from './eagle-photo.jpg';\r\nimport './App.css';\r\nimport './App.scss';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/*\r\n      <div className=\"Top-bar\">\r\n        <div>\r\n          7 Rules for Website Color Schemes\r\n        </div>\r\n        <div>\r\n          Acc√®s Rapide\r\n        </div>\r\n        <div className=\"Nav-menu\">\r\n          <a href=\"#\">\r\n            <span class=\"square\">\r\n              <img src={fastSymbol} alt=\"man running\" />\r\n            </span>\r\n          </a>\r\n          <ul>\r\n            <li>Up !</li>\r\n            <li>About</li>\r\n            <li>Des liens </li>\r\n            <li></li>\r\n          </ul>\r\n        </div>{/*FIN NAV MENU}\r\n      </div>{/*FIN TOP BAR}\r\n      */}\r\n      {/*<h1>Hello World!!!!!! zip55</h1>*/}\r\n      <header className=\"App-header\">\r\n      <div className=\"Hero-section\">\r\n        <img src={gearSymbol} className=\"Rotating-gear\" alt=\"logo\" />\r\n        <img src={gearSymbol} className=\"Rotating-gear\" alt=\"logo\" />\r\n        <div className=\"Hero-central\">\r\n          <div className=\"Hero-central-up\">\r\n            <h1>FC</h1>\r\n            <h1> |</h1>\r\n            <h1>.</h1>\r\n            <h1>.</h1>\r\n            <h1>.</h1>\r\n          </div>\r\n          <div className=\"Hero-central-down\">\r\n            <div className=\"Nav-button\">\r\n              <img src={fastSymbol} alt=\"man running\" />\r\n              <h3>Acc√®s rapide</h3>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"Parallax-home\">\r\n        <div className=\"Layer\">\r\n          <h1>ABOUT ...</h1>\r\n        </div>\r\n      </div>\r\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */  }\r\n      <div className=\"My-bio\">\r\n        <p>\r\n          <a\r\n            href=\"https://typologieanalytique.com/\"\r\n            target=\"_blank\"\r\n          >\r\n          Typologue-analyste</a>\r\n        </p>\r\n        {/*METTRE UN rotating gear pas loin*/}\r\n      </div>\r\n        <p>------------------------------</p>\r\n        <p> Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\"> www.flaticon.com</a></p>\r\n        <p><span>Photo by <a href=\"https://unsplash.com/@itfeelslikefilm?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">üá∏üáÆ Janko Ferliƒç</a> on <a href=\"https://unsplash.com/s/photos/library?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span></p>\r\n\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './fonts/Ubuntu-Regular.ttf'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n//tests React\n//ReactDOM.render(myelement, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}